library(haven)
write_csv(df4,"df44.CSV")
write_sav(df4,"df4.sav")
write_sav(diarrprvalence,"df3.sav")
write_sav(fevertreated,"df2.sav")
write_sav(feverprvalence,"df1.sav")

diarriatreat<-c("no treatment" , "treatment received")
count<-c(428,468)
d<- data.frame(diarriatreat,count)
library(ggplot2)
ggplot(d , aes(x = reorder(diarriatreat , -count), y = count)) +
  geom_bar(stat = "identity" , fill = c("blue","orange") , colour = "red") +
  geom_text(aes(label = count), position = position_stack(vjust = 0.5), show.legend = TRUE) +   
  coord_flip() +  labs(title = "Total number of diarrhea illnes",  x = "treatment seeking",  y = "Count")

diarriatreat1<-c("no treatment" , "treatment received")
count1<-c(652,431)
d1<- data.frame(diarriatreat1,count1)
ggplot(d1 , aes(x = reorder(diarriatreat , -count1), y = count1)) +
  geom_bar(stat = "identity" , fill = c("red","#00abcc") , colour = "red") +
  geom_text(aes(label = count1), position = position_stack(vjust = 0.5), show.legend = TRUE) +   
  coord_flip() +  labs(title = "Total number of fever illnes",  x = "treatment seeking",  y = "Count")

status<-c("Censored",	"Dropout", "Death")
count<-c(166,	88,	146)
library(dplyr)
k<-tibble(status,count) 
library(ggplot2)
ggplot(k , aes(x = reorder(status , -count), y = count)) +
  geom_bar(stat = "identity" , fill = c("red","green","yellow") , colour = "red") +
  geom_text(aes(label = count), position = position_stack(vjust = 0.5), show.legend = TRUE) +   
  coord_flip() +  labs(title = "Total number of patients",  x = "survival status",  y = "Count")

library(dplyr)
df<-starwars %>%
  select(name, mass) %>%
  mutate(
    mass2 = mass * 2,
    mass2_squared = mass2 * mass2
  )
# As well as adding new variables, you can use mutate() to
# remove variables and modify existing variables.
df1<-starwars %>%
  select(name, height, mass, homeworld) %>%
  mutate(
    mass = NULL,
    height = height * 0.0328084 # convert to feet
  )

# Use across() with mutate() to apply a transformation
# to multiple columns in a tibble.
df2<-starwars %>%
  select(name, homeworld, species) %>%
  mutate(across(!homeworld, as.factor))
 library(gtsummary)
df3<- starwars %>%
  select(name, mass, homeworld) %>%
  group_by(homeworld) %>%
  mutate(rank = min_rank(desc(mass))) %>% tbl_summary(by = homeworld)
df <- tibble(x = 1, y = 2)
df %>% mutate(z = x + y)
df %>% mutate(z = x + y, .before = 1)
df %>% mutate(z = x + y, .after = x)
# By default, mutate() keeps all columns from the input data.
df <- tibble(x = 1, y = 2, a = "a", b = "b")
df %>% mutate(z = x + y, .keep = "all") # the default
df %>% mutate(z = x + y, .keep = "used")
df %>% mutate(z = x + y, .keep = "unused")
df %>% mutate(z = x + y, .keep = "none")
############### ROC plot
library(pROC)
library(dplyr)
data("aSAH")
aSAH %>% 
  filter(gender == "Female") %>%
  roc(outcome, s100b)
aSAH %>% 
  filter(gender == "Female") %>%
  roc(outcome, s100b) %>%
  coords(transpose=FALSE) %>%
  filter(sensitivity > 0.6, 
         specificity > 0.6)
#### competing risk
library(cmprsk)
 lrf_time <- rexp(100)
 lrf_event <- sample(0:2, 100, replace = TRUE)
 trt <- sample(0:1, 100, replace = TRUE)
 strt <- sample(1:2, 100, replace = TRUE)
 x <- crr(lrf_time, lrf_event, cbind(trt, strt))
 tidy(x, conf.int = TRUE)
 
 
 library(riskRegression)
 library(prodlim)
 csh=CSC(Hist(cread$Time,cread$status)~cread$Age,data=cread)
 
 # A summary applied to ungrouped tbl returns a single row
 mtcars %>%
   summarise(mean = mean(disp), n = n())
 
 # Usually, you'll want to group first
 mtcars %>%
   group_by(cyl) %>%
   summarise(mean = mean(disp), n = n(),confi)
 
 # Each summary call removes one grouping level (since that group
 # is now just a single row)
 mtcars %>%
   group_by(cyl, vs) %>%
   summarise(cyl_n = n()) %>%
   group_vars()
 
 # BEWARE: reusing variables may lead to unexpected results
 mtcars %>%
   group_by(cyl) %>%
   summarise(disp = mean(disp), sd = sd(disp))
 
 # Refer to column names stored as strings with the `.data` pronoun:
 var <- "mass"
 summarise(starwars, avg = mean(.data[[var]], na.rm = TRUE))
 # Learn more in ?rlang::args_data_masking
 
 # In dplyr 1.1.0, returning multiple rows per group was deprecated in favor
 # of `reframe()`, which never messages and always returns an ungrchildage >= 11 & childage <= 20 ~ "11-20 months",
ouped
 # result:
 mtcars %>%
   group_by(cyl) %>%
   summarise(qs = quantile(disp, c(0.25, 0.75)), prob = c(0.25, 0.75))
 # ->
 mtcars %>%
   group_by(cyl) %>%
   reframe(qs = quantile(disp, c(0.25, 0.75)), prob = c(0.25, 0.75))
 d <- data.frame(list(gender=c("M","M","F","M","F","F"),age=c(47,59,21,32,33,24),income=c(55000,88000,32450,76500,123000,45650)))
library(dplyr)
  d <- tibble(gender=c("M","M","F","M","F","F"),age=c(47,59,21,32,33,24),income=c(55000,88000,32450,76500,123000,45650))
 
 d$over25 <- ifelse(d$age > 25,1,0)
tapply(d$income,list(d$gender,d$over25),mean)
##loop
x <- c(5,12,13)
for (n in x) print(sqrt(n))
